{"version":3,"file":null,"sources":["../node_modules/isarray/index.js","../node_modules/path-to-regexp/index.js","../lib/utils/args-parser.js","../node_modules/deepmerge/dist/es.js","../lib/normalizeRecord.js","../lib/utils/compose.js","../lib/create-rest-tree.js","../lib/index.js"],"sourcesContent":["module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","import pathToRegexp from 'path-to-regexp'\r\n\r\nexport default function parseExecArgs (url, props, { _require }) {\r\n  const result = { url }\r\n  if (_require.params && (!props || !props.params)) throw new Error('Require params!')\r\n  if (_require.data && (!props || !props.data)) throw new Error('Require data!')\r\n  let requireParams = pathToRegexp.parse(url)\r\n    .filter(token =>\r\n        [\r\n          typeof token !== 'string',\r\n          !token.optional, // https://github.com/pillarjs/path-to-regexp#optional\r\n          !token.asterisk // https://github.com/pillarjs/path-to-regexp#asterisk\r\n        ].every(Boolean)\r\n    )\r\n    .map(({ name }) => name)\r\n  if (requireParams.length && !props) throw new Error('Require url_params!')\r\n  if (!props) {\r\n    return result\r\n  }\r\n  const { url_params, params, data } = props\r\n  if (url_params) {\r\n    requireParams.forEach(param => {\r\n      if (!url_params[param]) {\r\n        throw new Error(`Require ${requireParams.join(', ')}, but given ${Object.keys(url_params).join(', ') || 'nothing'}`)\r\n      }\r\n    })\r\n    const toPath = pathToRegexp.compile(url)\r\n    result.url = toPath(url_params)\r\n  }\r\n  if (params) {\r\n    result.params = params\r\n  }\r\n  if (data) {\r\n    result.data = data\r\n  }\r\n  return result\r\n}","var isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {}\n}\n\nfunction cloneIfNecessary(value, optionsArgument) {\n    var clone = optionsArgument && optionsArgument.clone === true;\n    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n    var destination = target.slice();\n    source.forEach(function(e, i) {\n        if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument);\n        } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument);\n        } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument));\n        }\n    });\n    return destination\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n    var destination = {};\n    if (isMergeableObject(target)) {\n        Object.keys(target).forEach(function(key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument);\n        });\n    }\n    Object.keys(source).forEach(function(key) {\n        if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument);\n        } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument);\n        }\n    });\n    return destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n    var sourceIsArray = Array.isArray(source);\n    var targetIsArray = Array.isArray(target);\n    var options = optionsArgument || { arrayMerge: defaultArrayMerge };\n    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n    if (!sourceAndTargetTypesMatch) {\n        return cloneIfNecessary(source, optionsArgument)\n    } else if (sourceIsArray) {\n        var arrayMerge = options.arrayMerge || defaultArrayMerge;\n        return arrayMerge(target, source, optionsArgument)\n    } else {\n        return mergeObject(target, source, optionsArgument)\n    }\n}\n\ndeepmerge.all = function deepmergeAll(array, optionsArgument) {\n    if (!Array.isArray(array) || array.length < 2) {\n        throw new Error('first argument should be an array with at least two elements')\n    }\n\n    // we are sure there are at least 2 values, so it is safe to have no initial value\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, optionsArgument)\n    })\n};\n\nvar deepmerge_1 = deepmerge;\n\nexport default deepmerge_1;\n","import merge from 'deepmerge'\r\n\r\nexport default function normalizeRecord (record, { options = {}, meta = {}, hooks = [] }) {\r\n  if (record._normalized) return record\r\n  transformSugarSyntax(record)\r\n  stackUrl(options, record.options)\r\n  return {\r\n    _normalized: true,\r\n    _require: {\r\n      data: !!record.data,\r\n      params: !!record.params\r\n    },\r\n    name: record.name,\r\n    meta: merge(meta, record.meta || {}, { clone: true }),\r\n    options: merge(options, record.options || {}, { clone: true }),\r\n    hooks: [].concat(hooks, record.hook || []),\r\n    children: record.children || []\r\n  }\r\n}\r\n\r\nexport function transformSugarSyntax(record) {\r\n  // { name, url, method } --> { name, option: { url, method } }\r\n  if (record.options == null) record.options = {}\r\n  if (record.url) {\r\n    record.options.url = record.url\r\n  }\r\n  if (record.url && record.method && (record.children == null)) {\r\n    record.options.method = record.method\r\n  }\r\n}\r\n\r\nexport function stackUrl (parentOpts, options) {\r\n  // console.warn({parentOpts, options})\r\n  if (parentOpts.url == null && options.url == null) return null\r\n  const url = options.url\r\n  const parentUrl = parentOpts.url\r\n  if ((url != null) && url.startsWith('/')) return url\r\n  if (parentUrl == null && !url.startsWith('/')) {\r\n    throw new Error('Can not find root of path!')\r\n  }\r\n  if ((url == null || url === '') && parentUrl) return parentUrl\r\n  if (parentUrl.endsWith('/')) {\r\n    options.url = parentUrl + url\r\n  } else {\r\n    options.url = `${parentUrl}/${url}`\r\n  }\r\n}\r\n","export default function compose (hooks) {\r\n  if (!Array.isArray(hooks)) throw new TypeError('Hooks stack must be an array!')\r\n  hooks.forEach(fn => { if (typeof fn !== 'function') throw new TypeError('Hooks must be composed of functions!') })\r\n  // for (const fn of hooks) {\r\n  //   if (typeof fn !== 'function') throw new TypeError('Hooks must be composed of functions!')\r\n  // }\r\n  \r\n  return function (context, next) {\r\n    // last called middleware #\r\n    let index = -1\r\n    return dispatch(0)\r\n    function dispatch (i) {\r\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\r\n      index = i\r\n      let fn = hooks[i]\r\n      if (i === hooks.length) fn = next\r\n      if (!fn) return Promise.resolve()\r\n      try {\r\n        return Promise.resolve(fn(context, function next () {\r\n          return dispatch(i + 1)\r\n        }))\r\n      } catch (err) {\r\n        return Promise.reject(err)\r\n      }\r\n    }\r\n  }\r\n}","import parseExecArgs from './utils/args-parser'\r\nimport normalizeRecord from './normalizeRecord'\r\nimport compose from './utils/compose'\r\nimport merge from 'deepmerge'\r\n\r\nfunction setVal (obj, propNamesPath, val) {\r\n  propNamesPath.reduce((acc, propName, i) => {\r\n    if (i === propNamesPath.length - 1) return acc[propName] = val\r\n      return acc[propName]\r\n    }, obj)\r\n}\r\n\r\nfunction getVal (obj, propNamesPath) {\r\n  return propNamesPath.reduce((acc, propName) => acc[propName], obj)\r\n}\r\n\r\n/*\r\n* STEP 1: Create a skeleton tree with minimal intermediate computations\r\n*/\r\nexport function createTreeSkeleton (records, baseOptions) {\r\n  /*\r\n  * options: {\r\n  *   hooks,\r\n  *   meta,\r\n  *   options,\r\n  *   records,\r\n  *   axios\r\n  * }\r\n  */\r\n  const tree = {}\r\n  baseOptions.tree = tree\r\n  const closurePack = baseOptions\r\n  records.forEach((record, index) => addTreeBranch(tree, record, [index], closurePack))\r\n  return tree\r\n}\r\n\r\nexport function addTreeBranch (branch, record, indexPath, closurePack) {\r\n  branch[record.name] = {}\r\n  if (record.children && record.children.length) {\r\n    if (record.method) {\r\n      record.children.push({\r\n        name: record.method,\r\n        method: record.method,\r\n        url: record.url,\r\n        data: !!record.data,\r\n        params: !!record.params\r\n      })\r\n    }\r\n    record.children.forEach((childRecord, index) =>\r\n        addTreeBranch(branch[record.name], childRecord, indexPath.concat(index), closurePack))\r\n    return\r\n  }\r\n  // Create lazy calculation leaf\r\n  branch[record.name] = lazyCalcLeafNode(indexPath, closurePack)\r\n}\r\n\r\nexport function lazyCalcLeafNode (indexPath, closurePack) {\r\n  return (props) => {\r\n    const { tree, records, axios } = closurePack\r\n    let [propNamesPath, record] = calculateBranchNodes(records, indexPath, [], closurePack)\r\n    setVal(tree, propNamesPath, createExecFunc(record, propNamesPath, axios))\r\n    return getVal(tree, propNamesPath)(props)\r\n  }\r\n}\r\n/*\r\n* STEP 2: Сompute only the necessary nodes of the tree to execute the request\r\n*/\r\nexport function calculateBranchNodes (records, indexPath, propNamesPath, closurePack) {\r\n  const index = indexPath.shift()\r\n  records[index] = normalizeRecord(records[index], closurePack)\r\n  const record = records[index]\r\n  propNamesPath.push(record.name)\r\n  if (record.children.length) {\r\n    return calculateBranchNodes(record.children, indexPath, propNamesPath, record)\r\n  }\r\n  return [propNamesPath, record]\r\n}\r\n\r\nexport function createExecFunc (record, fullName, axios) {\r\n  function createContext(meta, options) {\r\n    return {\r\n      meta,\r\n      options,\r\n      response: null,\r\n      name: record.name,\r\n      fullName\r\n    }\r\n  }\r\n  function createRequestFunc () {\r\n    return (ctx, next) => axios(ctx.options)\r\n      .then(response => {\r\n        ctx.response = response\r\n        next()\r\n      })\r\n  }\r\n  if (record.options instanceof Array) {\r\n    record.options = merge.all(record.options)\r\n  }\r\n  if (record.meta instanceof Array) {\r\n    record.meta = merge.all(record.meta)\r\n  }\r\n  record.hooks.push(createRequestFunc())\r\n  const fn = compose(record.hooks)\r\n\r\n  return function (props) {\r\n    const tmpOptions = merge(record.options, parseExecArgs(record.options.url, props, record))\r\n    const context = createContext(record.meta, tmpOptions)\r\n    return fn(context).then(() => context)\r\n  }\r\n}\r\n","import { createTreeSkeleton } from './create-rest-tree'\r\n\r\nexport default class Apipie {\r\n  constructor(records, options) {\r\n    this.records = records\r\n    this.hooks = []\r\n    this.meta = {}\r\n    this.options = {}\r\n    this.axios = options.axios\r\n  }\r\n  globalHook(hook) {\r\n    this.hooks.push(hook)\r\n  }\r\n  create () {\r\n    return createTreeSkeleton(this.records, this)\r\n  }\r\n}\r\n"],"names":["const","let","pathToRegexp","merge"],"mappings":"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"}